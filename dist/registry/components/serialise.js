import{$ as e}from"../../mapDef-32126832.js";import{v as t,F as o}from"../../vectors-2b27bbf4.js";import{C as a,o as i}from"../../olMap-8ffb7ea3.js";import"./toolbar.js";import"../../size-aa14a1dc.js";import"../../Source-441004cf.js";import"../../string-4ef30a9f.js";import"../../rasters-f91a0263.js";const n=new a('\n<template id="serialisetemplate">\n  <section>\n    <div id="serialise-title" class="toolbartitle">Feature output</div>\n    <div id="serialise-content" class="toolbarcontent">\n      <select id="opformat" title="Output format">\n        <option value="GeoJSON" selected>GeoJSON</option>\n        <option value="KML">KML</option>\n        <option value="GPX">GPX</option>\n        <option value="mongo">MongoDB</option>\n      </select>\n      <label>Geometry only</label><input type="checkbox" id="geoonly">\n      <div>\n        <label>Simplify tolerance </label><input type="text" size="10" id="tolerance">\n        <button id="reserialise">Reserialise</button>\n      </div>\n      <textarea rows="6" id="serialOP"></textarea>\n      <a id="download" href="">Download data</a>\n    </div>\n  </section>\n</template>\n');e("#toolbar").appendChild(n.getTemplate("serialise"));let l="GeoJSON";const r=i.get();let s;function c(a,i,n){l=e("#opformat").value;const c=t.getFormat(l),p=t.getLayers().getArray();let d=[];p.forEach(e=>{"saveall"!=a&&e.get("id")!=i||(d=d.concat(e.get("source").getFeatures()))});const m=e("#geoonly").checked&&"GeoJSON"==l&&1===d.length;function f(e,t,o){const a={decimals:6};t&&(a.featureProjection=r.get("view").getProjection());return o?c.writeGeometry(e[0].getGeometry(),a):c.writeFeatures(e,a)}let u=f(d,!0,m);if(n)if(m){u=f([new o(c.readGeometry(u).simplify(n))],!1,m)}else{let e=[];e=c.readFeatures(u),e.forEach(e=>{e.setGeometry(e.getGeometry().simplify(n))}),u=f(e,!1,m)}e("#serialOP").value=u,s=i}e("#serialise-title").addEventListener("click",(function(){const e=this.nextElementSibling;e.style.display="block"==e.style.display?"none":"block"})),e("#reserialise").onclick=t=>{c(undefined,s,e("#tolerance").value)},e("#download").onclick=t=>{t.target.href="data:"+{GeoJSON:"application/vnd.geo+json",GPX:"application/gpx+xml",KML:"application/vnd.google-earth.kml+xml",mongo:"application/json"}[l]+";charset=utf-8,"+encodeURIComponent(e("#serialOP").value);const o="mongo"==l?"json":l.toLowerCase();t.target.download="myGeoData."+o};export default c;
